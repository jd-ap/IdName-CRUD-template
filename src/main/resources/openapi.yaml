openapi: 3.0.3
info:
  title: api crud template
  description: |-
    # Technical proof

  version: 0.1.0-SNAPSHOT
servers:
  - url: https://localhost:{port}/api/{version}
    variables:
      version:
        default: v1
      port:
        enum:
          - '8080'
          - '443'
          - '8443'
        default: '8080'
tags:
  - name: ids-names
    description: Operations about idName
paths:
  /ids-names:
    get:
      tags:
        - ids-names
      summary: Search all resources
      operationId: findAll
      parameters:
        - name: q
          in: query
          description: 'Fragment that must be present in the Identifier or name.'
          required: false
          schema:
            type: string
            minLength: 3
            maxLength: 64
        - name: pageNumber
          in: query
          description: 'Current page number.'
          required: false
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          in: query
          description: 'Number of visible elements on the page'
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: sort
          in: query
          description: 'List of sorting criteria'
          required: false
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 'id:a'
              pattern: '^\w+[:a|:d]?$'
      responses:
        '200':
          $ref: '#/components/responses/OkPage'
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - ids-names
      summary: Create new resource
      operationId: createNew
      requestBody:
        description: Created new object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdName'
      responses:
        '201':
          description: 'successful operation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /ids-names/{id}:
    get:
      tags:
        - ids-names
      summary: Get resource by id
      operationId: findById
      parameters:
        - name: id
          in: path
          description: 'The identifier that needs to be fetched. '
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - ids-names
      summary: Update a existing resource
      operationId: updateById
      parameters:
        - name: id
          in: path
          description: identifier that need to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existent resource in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdName'
      responses:
        '200':
          description: 'successful operation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - ids-names
      summary: Delete a existing resource
      description: identifier that need to be deleted.
      operationId: deleteById
      parameters:
        - name: id
          in: path
          description: The identifier that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /ids-names/name/{name}:
    get:
      tags:
        - ids-names
      summary: Get resource list by a name
      operationId: findByName
      parameters:
        - name: name
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
            nullable: false
            minLength: 3
            maxLength: 64
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: sort
          in: query
          required: false
          description: ''
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 'id:a'
              pattern: '^\w+[:a|:d]?$'
      responses:
        '200':
          $ref: '#/components/responses/OkPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    IdName:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 'e2042d1d-87eb-4677-9d55-4a017bfa590e'
        name:
          type: string
          example: 'aaa'
          minLength: 3
          maxLength: 64
        active:
          type: boolean
          readOnly: true
          example: true
      required:
        - name
    Error:
      type: object
      properties:
        type:
          type: string
          description: 'a URI identifier that categorizes the error'
          example: '/errors/incorrect-user-pass'
        title:
          type: string
          description: 'a brief, human-readable message about the error'
          example: 'Incorrect username or password.'
        detail:
          type: array
          description: 'a human-readable explanation of the error'
          items:
            type: string
          example: '[Authentication failed due to incorrect username or password.]'
  responses:
    Ok:
      description: 'successful operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdName'
    OkPage:
      description: 'successful operation'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/IdName'
      headers:
        x-Pagination-Current:
          description: 'Current page number.'
          schema:
            type: integer
            example: '0'
        x-Pagination-Size:
          description: 'Number of visible elements on the page'
          schema:
            type: integer
            example: '1'
        x-Pagination-Total:
          description: 'Number total of pages'
          schema:
            type: integer
            example: '1'
        x-Pagination-HasNext:
          description: 'indicates it is possible to paginate to the following page'
          schema:
            type: boolean
            example: 'false'
        x-Pagination-HasPrevious:
          description: 'indicates it is possible to paginate to the previous page'
          schema:
            type: boolean
            example: 'false'
        x-Pagination-NextPage:
          description: 'Next page number.'
          schema:
            type: integer
            example: '1'
        x-Pagination-PreviousPage:
          description: 'Previous page number.'
          schema:
            type: integer
            example: '1'
      links:
        getNextPage:
          operationId: findAll
          parameters:
            q: '$request.query.q'
            pageNumber: '$response.header.x-Pagination-NextPage'
            pageSize: '$request.query.pageSize'
            sort: '$request.query.sort'
        getPreviousPage:
          operationId: findAll
          parameters:
            q: '$request.query.q'
            pageNumber: '$response.header.x-Pagination-PreviousPage'
            pageSize: '$request.query.pageSize'
            sort: '$request.query.sort'
    NoContent:
      description: 'successfully but your response is empty'
    NotFound:
      description: 'Resource not found'
    InternalServerError:
      description: 'generic error'
    BadRequest:
      description: 'wrong parameters or request body'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: ''
    Forbidden:
      description: ''
